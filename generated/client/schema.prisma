generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["deno"]
  output          = "../generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Message {
  id        Int      @id @default(autoincrement())
  body      String
  createdAt DateTime @default(now())
  userId    String
  User      User     @relation(fields: [userId], references: [id])
}

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map("compound_id")
  userId             String    @map("profile_id")
  providerType       String    @map("provider_type")
  providerId         String    @map("provider_id")
  providerAccountId  String    @map("provider_account_id")
  refreshToken       String?   @map("refresh_token")
  accessToken        String?   @map("access_token")
  accessTokenExpires DateTime? @map("access_token_expires")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @default(now()) @map("updated_at")
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, providerAccountId])
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       String   @map("user_id")
  expires      DateTime
  sessionToken String   @unique @map("session_token")
  accessToken  String   @unique @map("access_token")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @map("updated_at")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model City {
  id        Int      @id @default(autoincrement())
  name      String
  addressId Int?
  Address   Address? @relation(fields: [addressId], references: [id])
}

model Address {
  id         Int       @id @default(autoincrement())
  zip        Int
  deliveryId Int?
  shippingId Int
  billingId  Int
  Delivery   Delivery? @relation(fields: [deliveryId], references: [id])
  company    String
  name       String
  line1      String
  line2      String?
  city       City[]
  state      String?
  postalCode String
  country    String
  Shipping   Order[]   @relation("Shipping")
  Billing    Order[]   @relation("Billing")
  Order      Order[]
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  productId String?
  products  Product[]
}

model Product {
  id          String     @id @default(uuid())
  title       String
  description String
  image       String
  sku         String     @unique
  quantity    Int
  price       Float
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now())
  userId      String?    @map("user_id")
  user        User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  categories  Category[]
  orders      Order[]
}

model Delivery {
  id      Int       @id @default(autoincrement())
  title   String
  address Address[]
  orders  Order[]
}

model VerificationRequest {
  id               Int      @id @default(autoincrement())
  identifier       String
  token            String   @unique
  expires          DateTime
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @default(now()) @map("updated_at")
  userId           String   @map("user_id")
  userVerification User     @relation(fields: [userId], references: [id])
}

model product_category {
  id   Int    @id @default(autoincrement())
  name String
}

model User {
  id                String                @id @default(uuid())
  email             String                @unique
  password          String
  username          String?
  first_name        String?               @map("first_name")
  last_name         String?               @map("last_name")
  phone_user        String?               @map("phone_user")
  trademark         String?
  locale_user       String?               @map("locale_user")
  image_url_user    String?               @map("image_url_user")
  auth_is_telegram  Boolean               @default(false) @map("auth_is_telegram")
  auth_is_yandex    Boolean               @default(false) @map("auth_is_yandex")
  auth_is_google    Boolean               @default(false) @map("auth_is_google")
  role              String                @default("buyer")
  bio               String?
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @default(now()) @map("updated_at")
  emailDateVerified DateTime?             @map("email_date_verified")
  messages          Message[]
  orders            Order[]
  products          Product[]
  verifiedUsers     VerificationRequest[]
  accounts          Account[]
  sessions          Session[]
}

model ProductsProduct {
  id       String                  @id @default(uuid())
  count    Int
  next     Int
  previous Int
  results  ProductsProductResult[]
}

model ProductsProductResult {
  id                String            @id @default(uuid())
  tags              Tags[]
  author            AuthorProduct?    @relation(fields: [authorProductId], references: [id])
  userId            String?           @map("user_id")
  name              String?
  image             String?
  text              String?
  price_product     Int?
  taxation          String?
  tax               String?
  authorProductId   String?
  productsProductId String?
  productsProduct   ProductsProduct[]
}

model products_product_category {
  id          Int @id @default(autoincrement())
  product_id  Int
  category_id Int
}

model products_tag {
  id    Int    @id @default(autoincrement())
  name  String
  color String
  slug  String
  key   Int?
}

model products_product_tags {
  id         Int @id @default(autoincrement())
  producy_id Int
  tag_id     Int
}

model ProductsProductWhoLikesIt {
  id         Int @id @default(autoincrement())
  product_id Int
  user_id    Int
}

model payments_productbuyers {
  id            String  @id @default(uuid())
  amount        Int
  backUrl       String?
  companyName   String?
  details       String?
  emailReq      String?
  errorCode     String?
  merchantEmail String?
  merchantName  String?
  message       String?
  orderId       String
  paymentId     String
  phoneReq      String?
  success       String?
  tranDate      String?
}

model AuthorProduct {
  id                    String                  @id @default(uuid())
  email                 String
  username              String?
  first_name            String?
  last_name             String?
  is_subscribed         Boolean?
  phone_user            String?
  trademark             String?
  locale_user           String?
  image_url_user        String?
  image_file_user       String?
  auth_is_telegram      Boolean
  auth_is_yandex        Boolean
  auth_is_google        Boolean
  is_admin_constructor  Boolean
  ProductsProductResult ProductsProductResult[]
}

model Tags {
  id                      Int                     @id @default(autoincrement())
  name                    String?
  color                   String?
  slug                    String?
  ProductsProductResult   ProductsProductResult[]
  productsProductResultId Int?
}

model UserFavoritesProduct {
  id          Int     @id @default(autoincrement())
  is_favorite Boolean @default(false)
  userId      String
  productId   String

  @@unique([userId, productId])
}

model Vote {
  id           Int     @id @default(autoincrement())
  count_votes  Int     @default(0)
  is_vote_user Boolean @default(false)
  productId    String?
  userId       String?

  @@unique([userId, productId])
}

model Money {
  id            Int         @id @default(autoincrement())
  amount        Int
  currency      Currency[]
  formatted     String
  SubTotal      Order[]     @relation("SubTotal")
  ShippingTotal Order[]     @relation("ShippingTotal")
  TaxTotal      Order[]     @relation("TaxTotal")
  GrandTotal    Order[]     @relation("GrandTotal")
  LineTotal     OrderItem[] @relation("LineTotal")
  UnitTotal     OrderItem[] @relation("UnitTotal")
}

model Currency {
  id                 Int          @id @default(autoincrement())
  code               CurrencyCode
  symbol             String
  thousandsSeparator String
  decimalSeparator   String
  decimalDigits      Int
  Money              Money[]
}

model Order {
  id                   Int               @id @default(autoincrement())
  order_id             String            @default(uuid())
  purchaseDate         DateTime          @default(now())
  description          String
  userId               String            @map("user_id")
  productId            String
  deliveryId           Int?
  Delivery             Delivery?         @relation(fields: [deliveryId], references: [id])
  products             Product[]
  customer             User?             @relation(fields: [userId], references: [id])
  cartId               String
  email                String
  orderId              Int
  addressShippingId    Int
  addressBillingId     Int
  shipping             Address           @relation("Shipping", fields: [addressShippingId], references: [id])
  billing              Address           @relation("Billing", fields: [addressBillingId], references: [id])
  items                OrderItem[]
  moneySubTotalId      Int
  moneyShippingTotalId Int
  moneyTaxTotalId      Int
  moneyGrandTotalId    Int
  subTotal             Money             @relation("SubTotal", fields: [moneySubTotalId], references: [id])
  shippingTotal        Money             @relation("ShippingTotal", fields: [moneyShippingTotalId], references: [id])
  taxTotal             Money             @relation("TaxTotal", fields: [moneyTaxTotalId], references: [id])
  grandTotal           Money             @relation("GrandTotal", fields: [moneyGrandTotalId], references: [id])
  totalItems           Int
  totalUniqueItems     Int
  notes                String
  attributes           CustomAttribute[]
  metadata             Json
  status               OrderStatus
  createdAt            DateTime
  updatedAt            DateTime
  address              Address[]
}

enum OrderStatus {
  UNPAID
  PAID
}

model CheckoutInput {
  id              Int           @id @default(autoincrement())
  cartId          Int
  email           String
  notes           String
  shippingInputId Int
  billingInputId  Int
  shipping        AddressInput  @relation("ShippingInput", fields: [shippingInputId], references: [id])
  billing         AddressInput? @relation("BillingInput", fields: [billingInputId], references: [id])
}

model OrderItem {
  id               Int                   @id @default(autoincrement())
  name             String?
  description      String?
  type             CartItemType
  images           String[]
  moneyUnitTotalId Int
  moneyLineTotalId Int
  unitTotal        Money                 @relation("UnitTotal", fields: [moneyUnitTotalId], references: [id])
  lineTotal        Money                 @relation("LineTotal", fields: [moneyLineTotalId], references: [id])
  quantity         Int
  createdAt        DateTime
  updatedAt        DateTime
  attributes       CustomCartAttribute[]
  metadata         Json
  Order            Order[]
}

enum CartItemType {
  SKU
  TAX
  SHIPPING
}

model AddressInput {
  id            Int             @id @default(autoincrement())
  company       String?
  name          String
  line1         String
  line2         String?
  city          String
  state         String?
  postalCode    String
  country       String
  ShippingInput CheckoutInput[] @relation("ShippingInput")
  BillingInput  CheckoutInput[] @relation("BillingInput")
}

model CustomAttribute {
  id         Int     @id @default(autoincrement())
  key        String
  value      String?
  attributes Order[]
}

model CustomCartAttribute {
  id         Int         @id @default(autoincrement())
  key        String
  value      String?
  attributes OrderItem[]
}

enum CurrencyCode {
  AED
  AFN
  ALL
  AMD
  ANG
  AOA
  ARS
  AUD
  AWG
  AZN
  BAM
  BBD
  BDT
  BGN
  BHD
  BIF
  BMD
  BND
  BOB
  BRL
  BSD
  BTC
  BTN
  BWP
  BYR
  BZD
  CAD
  CDF
  CHF
  CLP
  CNY
  COP
  CRC
  CUC
  CUP
  CVE
  CZK
  DJF
  DKK
  DOP
  DZD
  EGP
  ERN
  ETB
  EUR
  FJD
  FKP
  GBP
  GEL
  GHS
  GIP
  GMD
  GNF
  GTQ
  GYD
  HKD
  HNL
  HRK
  HTG
  HUF
  IDR
  ILS
  INR
  IQD
  IRR
  ISK
  JMD
  JOD
  JPY
  KES
  KGS
  KHR
  KMF
  KPW
  KRW
  KWD
  KYD
  KZT
  LAK
  LBP
  LKR
  LRD
  LSL
  LYD
  MAD
  MDL
  MGA
  MKD
  MMK
  MNT
  MOP
  MRO
  MTL
  MUR
  MVR
  MWK
  MXN
  MYR
  MZN
  NAD
  NGN
  NIO
  NOK
  NPR
  NZD
  OMR
  PAB
  PEN
  PGK
  PHP
  PKR
  PLN
  PYG
  QAR
  RON
  RSD
  RUB
  RWF
  SAR
  SBD
  SCR
  SDD
  SDG
  SEK
  SGD
  SHP
  SLL
  SOS
  SRD
  STD
  SVC
  SYP
  SZL
  THB
  TJS
  TMT
  TND
  TOP
  TRY
  TTD
  TVD
  TWD
  TZS
  UAH
  UGX
  USD
  UYU
  UZS
  VEB
  VEF
  VND
  VUV
  WST
  XAF
  XCD
  XBT
  XOF
  XPF
  YER
  ZAR
  ZMW
  WON
}
